name: Feature Branch

on:
  pull_request:
    branches: [ development ]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Fast feedback for feature branches
  feature-validation:
    name: Feature Branch Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: latest
        cache: true

    - name: Install dependencies
      run: pixi install -e default

    - name: Check code formatting
      run: pixi run -e default ruff format --check strategy_sandbox tests

    - name: Run linting
      run: pixi run -e default ci-check

    - name: Run type checking
      run: pixi run -e default ci-hints

    - name: Run fast unit tests
      run: |
        # Run fast unit tests with minimal coverage for quick feedback
        pixi run -e default pytest tests/unit -x -q --no-cov -m "not benchmark"

    - name: Run integration tests (if applicable)
      run: |
        # Run integration tests separately
        pixi run -e default pytest tests/integration -x -q --no-cov -m "not benchmark" || [ $? -eq 5 ]

  # Security check for feature branches
  feature-security:
    name: Feature Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Run basic security checks
      run: |
        pip install bandit[toml] safety
        # Basic security scan
        bandit -r strategy_sandbox -f json -o bandit-report.json || true
        bandit -r strategy_sandbox || true
        # Dependency security check
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: feature-security-reports-${{ github.run_id }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 7

  # Performance quick check
  feature-performance:
    name: Feature Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.pull_request.draft == false
    continue-on-error: true

    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: latest
        cache: true

    - name: Install dependencies
      run: pixi install -e default

    - name: Run quick performance tests
      run: |
        # Run a subset of performance tests for quick feedback
        pixi run -e default pytest tests/performance -m "not benchmark" --tb=short -v || true

  # PR status check
  feature-status:
    name: Feature Branch Status
    runs-on: ubuntu-latest
    needs: [feature-validation, feature-security, feature-performance]
    if: always() && github.event.pull_request.draft == false

    steps:
    - name: PR Status Summary
      run: |
        echo "## Feature Branch Status" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Validation | ${{ needs.feature-validation.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.feature-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | ${{ needs.feature-performance.result }} (non-blocking) |" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.feature-validation.result }}" == "success" ]]; then
          echo "✅ **Feature branch ready for review**" >> $GITHUB_STEP_SUMMARY
          echo "- Code formatting: ✅ Passed"  >> $GITHUB_STEP_SUMMARY
          echo "- Linting: ✅ Passed"  >> $GITHUB_STEP_SUMMARY
          echo "- Type checking: ✅ Passed"  >> $GITHUB_STEP_SUMMARY
          echo "- Fast tests: ✅ Passed"  >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Feature branch needs fixes**" >> $GITHUB_STEP_SUMMARY
          echo "Please check the validation job for details."  >> $GITHUB_STEP_SUMMARY
        fi

        # Security status
        if [[ "${{ needs.feature-security.result }}" == "success" ]]; then
          echo "- Security checks: ✅ Passed"  >> $GITHUB_STEP_SUMMARY
        else
          echo "- Security checks: ⚠️ Review needed"  >> $GITHUB_STEP_SUMMARY
        fi

  # Draft PR handling
  draft-feedback:
    name: Draft PR Feedback
    runs-on: ubuntu-latest
    timeout-minutes: 2
    if: github.event.pull_request.draft == true

    steps:
    - name: Draft PR Message
      run: |
        echo "## Draft PR Status" >> $GITHUB_STEP_SUMMARY
        echo "🚧 This is a draft PR - full validation will run when marked as ready for review." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick checks you can run locally:" >> $GITHUB_STEP_SUMMARY
        echo "- \`pixi run ci-check\` - Check code formatting and linting" >> $GITHUB_STEP_SUMMARY
        echo "- \`pixi run ci-hints\` - Run type checking" >> $GITHUB_STEP_SUMMARY
        echo "- \`pixi run test-unit\` - Run quick unit tests" >> $GITHUB_STEP_SUMMARY
        echo "- \`pixi run test-integration\` - Run integration tests" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### When ready:" >> $GITHUB_STEP_SUMMARY
        echo "Mark this PR as **Ready for Review** to trigger full validation pipeline." >> $GITHUB_STEP_SUMMARY