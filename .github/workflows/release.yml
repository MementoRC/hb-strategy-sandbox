name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  FORCE_COLOR: 1

jobs:
  # Run full test suite before release
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.20.1
    
    - name: Run full test suite
      run: |
        pixi run test
        pixi run ci-check
        pixi run ci-hints

  # Build and publish package
  build-and-publish:
    runs-on: ubuntu-latest
    needs: test
    environment: release
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.20.1
    
    - name: Build package
      run: pixi run -e dev python -m build
    
    - name: Check package
      run: pixi run -e dev python -m twine check dist/*
    
    - name: Publish to TestPyPI
      if: github.event_name == 'workflow_dispatch'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: pixi run -e dev python -m twine upload --repository testpypi dist/*
    
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: pixi run -e dev python -m twine upload dist/*
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-dist-${{ github.sha }}
        path: dist/
        retention-days: 90

  # Create GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation from git log
        echo "## Changes" > CHANGELOG.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${{ github.ref_name }}" >> CHANGELOG.md
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}

  # Update documentation
  update-docs:
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref_name, '-')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.20.1
    
    - name: Build and deploy docs
      run: |
        pixi run -e docs docs-build
        pixi run -e docs docs-deploy