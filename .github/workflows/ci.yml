name: CI

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

env:
  FORCE_COLOR: 1

jobs:
  # Lint and format check
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.20.1
    
    - name: Run linting
      run: pixi run ci-check
    
    - name: Run type checking
      run: pixi run ci-hints

  # Test matrix across Python versions
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI load
          - os: macos-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.11'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.20.1
    
    - name: Install dependencies
      run: |
        PYVER=${{ matrix.python-version }}
        pixi install -e py${PYVER//./}
    
    - name: Run unit tests
      run: |
        PYVER=${{ matrix.python-version }}
        pixi run -e py${PYVER//./} test-unit
    
    - name: Run integration tests
      run: |
        PYVER=${{ matrix.python-version }}
        # Allow integration tests to pass if no tests are found
        pixi run -e py${PYVER//./} pytest tests/integration --maxfail=1 -x || [ $? -eq 5 ]
      
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: true

  # Performance benchmarks
  benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.20.1
    
    - name: Run benchmarks
      run: pixi run test-performance
    
    - name: Comment benchmark results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const benchmarkResults = fs.readFileSync('benchmark-results.json', 'utf8');
            const results = JSON.parse(benchmarkResults);
            
            const comment = `## ðŸ“Š Performance Benchmark Results
            
            | Metric | Value | Change |
            |--------|-------|--------|
            | Avg Response Time | ${results.avg_response_time}ms | ${results.change_response_time} |
            | Memory Usage | ${results.memory_usage}MB | ${results.change_memory} |
            | Throughput | ${results.throughput} ops/sec | ${results.change_throughput} |
            
            <details>
            <summary>View detailed results</summary>
            
            \`\`\`json
            ${JSON.stringify(results, null, 2)}
            \`\`\`
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('No benchmark results found or error reading results:', error.message);
          }

  # Build and package verification
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        pixi-version: v0.20.1
    
    - name: Build package
      run: pixi run -e dev python -m build
    
    - name: Check package
      run: pixi run -e dev python -m twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 7

  # Security scanning
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Scan
      uses: securecodewarrior/github-action-bandit@v1.0.1
      with:
        exit_zero: true
    
    - name: Run Safety Check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30