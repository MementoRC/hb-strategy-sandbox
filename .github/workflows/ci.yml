# Consolidated CI Pipeline
# This workflow combines the original ci.yml and advanced-ci.yml into a single,
# state-of-the-art pipeline that uses tiered execution for efficiency.

name: Consolidated CI

on:
  push:
    branches: [ main, development ]
  pull_request:
    paths:
      - '**.py'
      - '**.toml'
      - '**.lock'
      - '**.yml'
      - 'docs/**'
      - '.github/workflows/ci.yml'
  schedule:
    # Run comprehensive security scans nightly
    - cron: '0 2 * * 1-5'
  workflow_dispatch:
    inputs:
      run_performance:
        description: 'Run performance benchmarks and regression analysis'
        required: false
        default: 'false'
        type: boolean
      run_full_security:
        description: 'Run comprehensive security scan (including container scans)'
        required: false
        default: 'false'
        type: boolean
      deploy_docs:
        description: 'Build and deploy documentation'
        required: false
        default: 'false'
        type: boolean

# Set default permissions to read-only for security
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"
  PYTHONIOENCODING: "utf-8"
  PIXI_VERSION: "v0.41.4"

# YAML anchors for reusability
x-pixi-setup: &pixi-setup
  name: Set up Pixi
  uses: prefix-dev/setup-pixi@v0.8.8
  with:
    pixi-version: ${{ env.PIXI_VERSION }}
    cache: true

jobs:
  #########################################
  # 1. FAST FEEDBACK JOBS (Run on all PRs)
  #########################################
  quick-checks:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - *pixi-setup
      - name: Install dependencies
        run: pixi install -e default --locked
      - name: Fast linting check
        run: pixi run ci-check
      - name: Fast unit tests (no coverage)
        run: pixi run -e default pytest tests/unit -x -q --no-cov -m "not integration and not benchmark"

  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quick-checks
    steps:
      - uses: actions/checkout@v4
      - *pixi-setup
      - name: Install dependencies
        run: pixi install -e default --locked
      - name: Run linting
        run: pixi run lint
      - name: Run type checking
        run: pixi run typecheck

  test-matrix:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: quick-checks
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.10"
            pixi-environment: "py310"
          - os: ubuntu-latest
            python-version: "3.11"
            pixi-environment: "py311"
          - os: ubuntu-latest
            python-version: "3.12"
            pixi-environment: "py312"
          - os: macos-latest
            python-version: "3.12"
            pixi-environment: "py312"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Pixi for ${{ matrix.pixi-environment }}
        uses: prefix-dev/setup-pixi@v0.8.8
        with:
          environments: ${{ matrix.pixi-environment }}
          pixi-version: ${{ env.PIXI_VERSION }}
          cache: true
      - name: Install dependencies
        run: pixi install -e ${{ matrix.pixi-environment }} --locked
      - name: Run tests with coverage
        run: pixi run -e ${{ matrix.pixi-environment }} pytest tests/unit tests/integration -m "not benchmark" --cov=strategy_sandbox --cov-report=xml:coverage.xml
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: MementoRC/hb-strategy-sandbox
          fail_ci_if_error: false

  ###################################################
  # 2. COMPREHENSIVE JOBS (Run on merge or dispatch)
  ###################################################
  build-and-package:
    name: Build & Package
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test-matrix
    # Run only on push to main/dev or on dispatch, not on every PR commit
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - *pixi-setup
      - name: Install dependencies
        run: pixi install -e default --locked
      - name: Build package
        run: pixi run -e default python -m build
      - name: Check package
        run: pixi run -e default python -m twine check dist/*
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      security-events: write # for github/codeql-action/upload-sarif
    steps:
      - uses: actions/checkout@v4
      - *pixi-setup
      - name: Install security environment
        run: pixi install -e security --locked
      - name: Run baseline security scans (PRs)
        if: github.event_name == 'pull_request'
        run: pixi run -e security security-ci
      - name: Run comprehensive security scans (Push, Dispatch, Schedule)
        if: github.event_name != 'pull_request' || github.event.inputs.run_full_security == 'true'
        run: |
          pixi run -e security security-static || echo "Static security scan completed with findings"
          pixi run -e security security-deps || echo "Dependency scan completed with findings"
          pixi run -e security security-audit || echo "Security audit completed with findings"
          pixi run -e security security-secrets || echo "Secrets scan completed"
          pixi run -e security security-supply-chain
      - name: Generate security summary
        if: github.event_name != 'pull_request' || github.event.inputs.run_full_security == 'true'
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status | Issues |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|--------|" >> $GITHUB_STEP_SUMMARY

          # Check if reports exist and summarize
          if [ -f "reports/bandit-report.json" ]; then
            issues=$(jq '.results | length' reports/bandit-report.json 2>/dev/null || echo "0")
            echo "| Bandit | ✅ | $issues |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "reports/safety-report.json" ]; then
            echo "| Safety | ✅ | Checked |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "reports/pip-audit-report.json" ]; then
            vulnerabilities=$(jq '.vulnerabilities | length' reports/pip-audit-report.json 2>/dev/null || echo "0")
            echo "| Pip-Audit | ✅ | $vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/
          retention-days: 30

  performance:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Run on push to development (to update baseline), or when manually triggered
    if: (github.event_name == 'push' && github.ref == 'refs/heads/development') || github.event.inputs.run_performance == 'true'
    steps:
      - uses: actions/checkout@v4
      - *pixi-setup
      - name: Install performance tools
        run: pixi install -e performance --locked
      - name: Download baseline benchmarks
        uses: actions/download-artifact@v4
        with:
          name: performance-baseline
          path: baseline/
        continue-on-error: true
      - name: Run performance benchmarks
        run: pixi run -e performance performance-benchmark
      - name: Performance regression analysis
        run: |
          if [ -f "baseline/benchmark.json" ] && [ -f "reports/benchmark.json" ]; then
            echo "## 📊 Performance Analysis" >> $GITHUB_STEP_SUMMARY
            pixi run -e performance performance-regression baseline/benchmark.json reports/benchmark.json || true
          else
            echo "## 📊 Performance Baseline Created" >> $GITHUB_STEP_SUMMARY
            echo "First benchmark run - baseline established for future comparisons" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: reports/benchmark.json
      - name: Update performance baseline
        if: github.ref == 'refs/heads/development'
        uses: actions/upload-artifact@v4
        with:
          name: performance-baseline
          path: reports/benchmark.json

  docs:
    name: Docs Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Run only when docs files change, or when manually triggered
    if: |
      github.event.inputs.deploy_docs == 'true' ||
      (github.event_name == 'pull_request' && (
        exists(github.event.pull_request.changed_files) &&
        (join(github.event.pull_request.changed_files, ',').contains('docs/') ||
         join(github.event.pull_request.changed_files, ',').contains('mkdocs.yml'))
      ))
    steps:
      - uses: actions/checkout@v4
      - *pixi-setup
      - name: Install documentation tools
        run: pixi install -e docs --locked
      - name: Build documentation
        run: pixi run -e docs docs-build
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation-site
          path: site/
          retention-days: 7

  container-and-sbom:
    name: Container & SBOM
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-and-package, security]
    # Run on push to main/dev or when full security scan is requested
    if: github.event_name == 'push' || github.event.inputs.run_full_security == 'true'
    permissions:
      packages: write # to push to GHCR
      security-events: write # to upload trivy results
    steps:
      - uses: actions/checkout@v4
      - name: Build container image
        run: |
          if [ ! -f Dockerfile ]; then
            # Create a minimal Dockerfile if it doesn't exist
            cat > Dockerfile << 'EOF'
          FROM python:3.12-slim
          WORKDIR /app
          COPY . .
          RUN pip install -e .
          CMD ["python", "-m", "strategy_sandbox"]
          EOF
          fi
          docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Generate SBOM
        run: |
          pip install cyclonedx-bom
          cyclonedx-bom -e . -o reports/sbom.json
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: reports/sbom.json

  #########################################
  # 3. FINAL SUMMARY JOB
  #########################################
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quick-checks, lint-and-type-check, test-matrix]
    if: always() # This job runs even if previous jobs fail
    steps:
      - name: Report CI Status
        run: |
          echo "## CI Run Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quick Checks | ${{ needs.quick-checks.result == 'success' && '✅' || '❌' }} ${{ needs.quick-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Type Check | ${{ needs.lint-and-type-check.result == 'success' && '✅' || '❌' }} ${{ needs.lint-and-type-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Matrix | ${{ needs.test-matrix.result == 'success' && '✅' || '❌' }} ${{ needs.test-matrix.result }} |" >> $GITHUB_STEP_SUMMARY

          # Get optional job results (these may be skipped)
          build_result="${{ needs.build-and-package.result || 'skipped' }}"
          security_result="${{ needs.security.result || 'skipped' }}"
          performance_result="${{ needs.performance.result || 'skipped' }}"
          docs_result="${{ needs.docs.result || 'skipped' }}"
          container_result="${{ needs.container-and-sbom.result || 'skipped' }}"

          echo "| Build & Package | ${{ github.ref == 'refs/heads/main' && (needs.build-and-package.result == 'success' && '✅' || '❌') || '⚪' }} ${build_result} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${security_result == 'success' && '✅' || security_result == 'skipped' && '⚪' || '❌'} ${security_result} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${performance_result == 'success' && '✅' || performance_result == 'skipped' && '⚪' || '❌'} ${performance_result} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docs Pipeline | ${docs_result == 'success' && '✅' || docs_result == 'skipped' && '⚪' || '❌'} ${docs_result} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container & SBOM | ${container_result == 'success' && '✅' || container_result == 'skipped' && '⚪' || '❌'} ${container_result} |" >> $GITHUB_STEP_SUMMARY

          # Determine overall status - only require core jobs to pass
          if [[ "${{ needs.quick-checks.result }}" == "success" && \
                "${{ needs.lint-and-type-check.result }}" == "success" && \
                "${{ needs.test-matrix.result }}" == "success" ]]; then
            echo -e "\n**Overall Status: ✅ Core checks passed. Optional jobs completed as scheduled.**" >> $GITHUB_STEP_SUMMARY
          else
            echo -e "\n**Overall Status: ❌ Core checks failed.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
