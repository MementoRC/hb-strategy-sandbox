name: Advanced CI Pipeline
# Enhanced CI workflow based on reference project patterns

on:
  pull_request:
    branches: [ development, main ]
  push:
    branches: [ development ]
  workflow_dispatch:
    inputs:
      run_performance:
        description: 'Run performance benchmarks'
        required: false
        default: 'false'
        type: boolean
      run_security_full:
        description: 'Run comprehensive security scan'
        required: false
        default: 'false'
        type: boolean

env:
  FORCE_COLOR: 1
  PYTHONIOENCODING: utf-8

jobs:
  # Enhanced matrix strategy with strategic combinations
  test-matrix:
    name: Test ${{ matrix.python-version }} on ${{ matrix.os }} (${{ matrix.test-type }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:
          # Production-critical combinations
          - os: ubuntu-latest
            python-version: "3.12"
            test-type: "comprehensive"
            pixi-env: "full"
          - os: ubuntu-latest
            python-version: "3.11"
            test-type: "integration"
            pixi-env: "default"
          # Development combinations
          - os: ubuntu-latest
            python-version: "3.10"
            test-type: "unit-only"
            pixi-env: "py310"
          # Cross-platform validation
          - os: macos-latest
            python-version: "3.12"
            test-type: "unit-only"
            pixi-env: "py312"
          - os: windows-latest
            python-version: "3.12"
            test-type: "unit-only"
            pixi-env: "py312"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        environments: ${{ matrix.pixi-env }}
        pixi-version: v0.41.4
        cache: true
      continue-on-error: false

    - name: Install dependencies
      run: pixi install -e ${{ matrix.pixi-env }} --locked

    - name: Run tests based on type
      shell: bash
      run: |
        # Add debugging for Windows issues
        echo "OS: ${{ matrix.os }}, Test type: ${{ matrix.test-type }}, Environment: ${{ matrix.pixi-env }}"
        
        # Show Python and pytest version
        pixi run -e ${{ matrix.pixi-env }} python --version
        pixi run -e ${{ matrix.pixi-env }} pytest --version
        
        if [ "${{ matrix.test-type }}" = "comprehensive" ]; then
          pixi run -e ${{ matrix.pixi-env }} ci-full
        elif [ "${{ matrix.test-type }}" = "integration" ]; then
          pixi run -e ${{ matrix.pixi-env }} test-integration
        else
          # Run unit tests with same pattern as main CI for consistency
          pixi run -e ${{ matrix.pixi-env }} pytest tests/unit -m "not integration and not benchmark" --maxfail=5 -x
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.test-type }}
        path: |
          .coverage*
          reports/
        retention-days: 7

  # Enhanced security pipeline
  security-comprehensive:
    name: Comprehensive Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        environments: security
        pixi-version: v0.41.4
        cache: true

    - name: Install security tools
      run: pixi install -e security --locked

    - name: Create reports directory
      run: mkdir -p reports

    - name: Run static security analysis
      run: pixi run -e security security-static
      continue-on-error: true

    - name: Run dependency security scan
      run: pixi run -e security security-deps
      continue-on-error: true

    - name: Run security audit
      run: pixi run -e security security-audit
      continue-on-error: true

    - name: Run secrets detection
      run: |
        # Initialize baseline if it doesn't exist
        if [ ! -f .secrets.baseline ]; then
          pixi run -e security detect-secrets scan --all-files \
            --force-use-all-plugins --baseline .secrets.baseline
        fi
        pixi run -e security security-secrets
      continue-on-error: true

    - name: Supply chain verification
      run: pixi run -e security security-supply-chain

    - name: Generate security summary
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Status | Issues |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|--------|" >> $GITHUB_STEP_SUMMARY

        # Check if reports exist and summarize
        if [ -f "reports/bandit-report.json" ]; then
          issues=$(jq '.results | length' reports/bandit-report.json 2>/dev/null || echo "0")
          echo "| Bandit | ✅ | $issues |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ -f "reports/safety-report.json" ]; then
          echo "| Safety | ✅ | Checked |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ -f "reports/pip-audit-report.json" ]; then
          vulnerabilities=$(jq '.vulnerabilities | length' reports/pip-audit-report.json 2>/dev/null || echo "0")
          echo "| Pip-Audit | ✅ | $vulnerabilities |" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: reports/
        retention-days: 30

  # Performance monitoring with regression detection
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request' || github.event.inputs.run_performance == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        environments: performance
        pixi-version: v0.41.4
        cache: true

    - name: Install performance tools
      run: pixi install -e performance --locked

    - name: Download baseline benchmarks
      uses: actions/download-artifact@v4
      with:
        name: performance-baseline
        path: baseline/
      continue-on-error: true

    - name: Run performance benchmarks
      run: |
        mkdir -p reports
        pixi run -e performance performance-benchmark

    - name: Performance regression analysis
      run: |
        if [ -f "baseline/benchmark.json" ] && [ -f "reports/benchmark.json" ]; then
          echo "## 📊 Performance Analysis" >> $GITHUB_STEP_SUMMARY
          pixi run -e performance performance-regression baseline/benchmark.json reports/benchmark.json || true
        else
          echo "## 📊 Performance Baseline Created" >> $GITHUB_STEP_SUMMARY
          echo "First benchmark run - baseline established for future comparisons" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: reports/benchmark.json
        retention-days: 90

    - name: Update performance baseline
      if: github.ref == 'refs/heads/development'
      uses: actions/upload-artifact@v4
      with:
        name: performance-baseline
        path: reports/benchmark.json
        retention-days: 365

  # Advanced documentation pipeline with validation
  docs-advanced:
    name: Advanced Documentation Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        environments: docs
        pixi-version: v0.41.4
        cache: true

    - name: Install documentation tools
      run: pixi install -e docs --locked

    - name: Build documentation
      run: pixi run -e docs docs-build

    - name: Validate documentation links
      run: |
        # Install link checker
        pip install linkchecker

        # Check internal links in built documentation
        linkchecker --check-extern site/ --ignore-url=".*localhost.*" --no-warnings || true

    - name: Generate API documentation coverage
      run: |
        echo "## 📚 Documentation Coverage" >> $GITHUB_STEP_SUMMARY

        # Count Python files vs documented modules
        py_files=$(find strategy_sandbox -name "*.py" | grep -v __pycache__ | wc -l)
        md_files=$(find docs -name "*.md" | wc -l)

        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Python Files | $py_files |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation Files | $md_files |" >> $GITHUB_STEP_SUMMARY

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: site/
        retention-days: 30

  # Container security scanning
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.run_security_full == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build container image
      run: |
        # Create a minimal Dockerfile if it doesn't exist
        if [ ! -f Dockerfile ]; then
          cat > Dockerfile << 'EOF'
        FROM python:3.12-slim

        # Non-root user setup
        RUN groupadd --gid 1000 appuser && \
            useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

        WORKDIR /app
        COPY . .
        RUN pip install -e .

        USER appuser
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
            CMD python -c "import strategy_sandbox; print('OK')" || exit 1

        CMD ["python", "-m", "strategy_sandbox"]
        EOF
        fi

        docker build -t hb-strategy-sandbox:latest .

    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'hb-strategy-sandbox:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # SBOM generation for supply chain security
  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.ref == 'refs/heads/development'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        pixi-version: v0.41.4
        cache: true

    - name: Generate SBOM
      run: |
        # Install SBOM generation tool
        pip install cyclone-spdx

        # Generate SBOM
        mkdir -p reports
        cyclone-spdx strategy_sandbox --output-file reports/sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: reports/sbom.spdx.json
        retention-days: 90

  # Final status aggregation
  ci-status-advanced:
    name: Advanced CI Status
    runs-on: ubuntu-latest
    needs: [test-matrix, security-comprehensive, docs-advanced]
    if: always()

    steps:
    - name: Check CI status
      run: |
        echo "## 🎯 Advanced CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.test-matrix.result }}" = "success" ]; then
          echo "| Matrix Testing | ✅ PASSED |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Matrix Testing | ❌ FAILED |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.security-comprehensive.result }}" = "success" ]; then
          echo "| Security Scan | ✅ PASSED |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Security Scan | ⚠️ REVIEW REQUIRED |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.docs-advanced.result }}" = "success" ]; then
          echo "| Documentation | ✅ PASSED |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Documentation | ❌ FAILED |" >> $GITHUB_STEP_SUMMARY
        fi

        # Determine overall status
        if [ "${{ needs.test-matrix.result }}" = "success" ] && [ "${{ needs.docs-advanced.result }}" = "success" ]; then
          echo "## 🎉 CI Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "All critical components passed. Ready for review!" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ CI Status: REVIEW REQUIRED" >> $GITHUB_STEP_SUMMARY
          echo "Some components need attention before merging." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
