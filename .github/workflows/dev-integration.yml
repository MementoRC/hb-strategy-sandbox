name: Development Integration

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # Fast feedback for development branch
  quick-checks:
    name: Quick Development Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        pixi-version: v0.41.4
        cache: true

    - name: Install dependencies
      run: pixi install -e default --locked

    - name: Quick formatting check
      run: pixi run -e default ruff format --check strategy_sandbox tests

    - name: Quick linting
      run: pixi run -e default ci-check

    - name: Fast tests
      run: pixi run -e default pytest -x -q --no-cov -m "not integration and not benchmark"

  # Comprehensive testing for development integration
  integration-tests:
    name: Development Integration Tests
    runs-on: ubuntu-latest
    needs: [quick-checks]
    timeout-minutes: 25

    # Enhanced service containers for development testing
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      websocket-echo:
        image: jmalloc/echo-server:latest
        ports:
          - 8080:8080

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        pixi-version: v0.41.4
        cache: true

    - name: Install dependencies
      run: pixi install -e default --locked

    - name: Wait for service containers
      run: |
        echo "Waiting for service containers to be ready..."
        # Install redis-tools for health checks
        sudo apt-get update && sudo apt-get install -y redis-tools
        # Wait for Redis
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        # Give WebSocket echo server a moment to start
        sleep 5
        echo "Service containers ready"

    - name: Run full test suite
      env:
        REDIS_URL: redis://localhost:6379
        WEBSOCKET_ECHO_URL: ws://localhost:8080
        TEST_WITH_SERVICES: true
      run: pixi run -e default pytest tests --cov=strategy_sandbox --cov-report=xml:coverage.xml -m "not benchmark"

    - name: Run type checking
      run: pixi run -e default ci-hints

    - name: Upload coverage
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: development
        name: development-coverage
        fail_ci_if_error: false

  # Security checks for development
  security-scan:
    name: Development Security Scan
    runs-on: ubuntu-latest
    needs: [quick-checks]
    timeout-minutes: 15
    continue-on-error: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install security tools
      run: |
        pip install bandit[toml] safety pip-audit

    - name: Run security scans
      run: |
        mkdir -p security-reports
        # Run basic security checks
        bandit -r strategy_sandbox -f json -o security-reports/bandit-report.json || true
        safety check --json --output security-reports/safety-report.json || true
        pip-audit --format=json --output=security-reports/pip-audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dev-security-reports-${{ github.run_id }}
        path: security-reports/
        retention-days: 7

  # Package building test
  package-test:
    name: Development Package Test
    runs-on: ubuntu-latest
    needs: [integration-tests]
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        pixi-version: v0.41.4
        cache: true

    - name: Install dependencies
      run: pixi install -e default --locked

    - name: Build package
      run: pixi run -e default python -m build

    - name: Check package
      run: pixi run -e default python -m twine check dist/*

    - name: Test package installation
      run: |
        # Create a fresh environment and test installation
        python -m venv test-install
        source test-install/bin/activate
        pip install dist/*.whl
        python -c "import strategy_sandbox; print('Package import successful')"

  # Performance regression check
  performance-check:
    name: Development Performance Check
    runs-on: ubuntu-latest
    needs: [integration-tests]
    timeout-minutes: 15
    continue-on-error: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Pixi
      uses: prefix-dev/setup-pixi@v0.8.8
      with:
        pixi-version: v0.41.4
        cache: true

    - name: Install dependencies
      run: pixi install -e default --locked

    - name: Run performance tests
      run: |
        mkdir -p benchmark-results
        # Run performance tests with baseline comparison
        pixi run -e default pytest tests/performance -m "benchmark" -v \
          --benchmark-json=benchmark-results/dev-benchmark-results.json \
          --benchmark-sort=mean || true

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dev-performance-results-${{ github.run_id }}
        path: benchmark-results/
        retention-days: 30

  # Development status summary
  dev-status:
    name: Development Status
    runs-on: ubuntu-latest
    needs: [quick-checks, integration-tests, security-scan, package-test, performance-check]
    if: always()
    timeout-minutes: 5

    steps:
    - name: Development workflow summary
      run: |
        echo "## 🚀 Development Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Quick Checks | ${{ needs.quick-checks.result }} | Formatting, linting, fast tests |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} | Full test suite with coverage |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} | Vulnerability detection |" >> $GITHUB_STEP_SUMMARY
        echo "| Package Test | ${{ needs.package-test.result }} | Build and installation test |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Check | ${{ needs.performance-check.result }} | Benchmark regression (non-blocking) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Determine overall status
        CRITICAL_FAILURES=0
        [[ "${{ needs.quick-checks.result }}" != "success" ]] && ((CRITICAL_FAILURES++))
        [[ "${{ needs.integration-tests.result }}" != "success" ]] && ((CRITICAL_FAILURES++))
        [[ "${{ needs.package-test.result }}" != "success" ]] && ((CRITICAL_FAILURES++))

        if [ $CRITICAL_FAILURES -eq 0 ]; then
          echo "✅ **Development branch ready for merge to main**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Ready for Production:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All critical tests passing" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Package builds successfully" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Quality checks passed" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "- ✅ Security scans clean" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Security scans need review (non-blocking)" >> $GITHUB_STEP_SUMMARY
          fi
          exit 0
        else
          echo "❌ **Development branch needs attention before merge**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Issues to resolve:" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.quick-checks.result }}" != "success" ]] && echo "- ❌ Quick checks failed" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.integration-tests.result }}" != "success" ]] && echo "- ❌ Integration tests failed" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.package-test.result }}" != "success" ]] && echo "- ❌ Package build/test failed" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
